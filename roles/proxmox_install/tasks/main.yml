---

- name: Get facts on current container
  community.docker.current_container_facts:

- name: Set a hostname for our proxmox
  ansible.builtin.hostname:
    name: "{{ proxmox_hostname }}"
    use: "debian"
  # this will not within a container - which we run our tests in
  when: not ansible_module_running_in_container

# this can happen if the proxmox installation (bare metal) happened via the iso
- name: Check apt sources for pve
  ansible.builtin.shell: |
    set -o pipefail
    if test -f /etc/apt/sources.list; then
      # test for existence. If the entry exists, we have exit code 0
      cat /etc/apt/sources.list | grep pve
    else
      # means it does not exist - all good
      exit 1
    fi
  args:
    executable: /usr/bin/bash
  register: pve_exists_in_apt_source
  failed_when: "pve_exists_in_apt_source.rc > 1"  # we only fail if the exit code is not 0 or 1 (even 1 is expected)
  changed_when: "pve_exists_in_apt_source.rc == 0"

# if installed via the iso, the pve sources are in /etc/apt/sources.list,
# but we want to use /etc/apt/sources.list.d/pve-non-enterprise.list
- name: Remove pve from default source
  ansible.builtin.command: sed -i '/pve/d' /etc/apt/sources.list  # noqa: command-instead-of-module
  when: "pve_exists_in_apt_source.rc == 0"
  changed_when: "pve_exists_in_apt_source.rc == 0"

- name: Install basic packages
  ansible.builtin.apt:
    update_cache: true
    cache_valid_time: 0
    pkg:
      - gpg
      - gnupg2
      - dirmngr
      - apt-transport-https
      - ca-certificates
      - curl
      - unattended-upgrades
      - bridge-utils
      - sudo
      - lsb-release


- name: Deploy pve apt sources
  ansible.builtin.copy:
    src: files/pve-non-enterprise.list
    owner: root
    group: root
    dest: '/etc/apt/sources.list.d/pve-non-enterprise.list'
    mode: '0644'

- name: Install proxmox gpg key
  ansible.builtin.apt_key:
    url: https://enterprise.proxmox.com/debian/proxmox-release-bookworm.gpg
    keyring: /etc/apt/trusted.gpg.d/proxmox-release-bookworm.gpg

- name: Install proxmox
  ansible.builtin.apt:
    update_cache: true
    cache_valid_time: 0
    pkg:
      - proxmox-ve
      # things that are installed by default when we use the iso installer
      - ksm-control-daemon
      - open-iscsi
      - systemd-sysv
      # backup utils
      - cifs-utils
      - nfs-common

# those are created by the installer, get rid of those
- name: Remove enterprise pve sources
  ansible.builtin.file:
    path: /etc/apt/sources.list.d/pve-enterprise.list
    state: absent

- name: Remove enterprise ceph sources
  ansible.builtin.file:
    path: /etc/apt/sources.list.d/ceph.list
    state: absent
# basic network config

# disable ipv6, just hindering us for now
- name: Disable ipv6
  ansible.posix.sysctl:
    name: net.ipv6.conf.all.disable_ipv6
    value: '1'
    sysctl_set: true

# we need this to route traffic to our VMs for the outer nets
- name: Enable ip forward
  ansible.posix.sysctl:
    name: net.ipv4.ip_forward
    value: '1'
    sysctl_set: true

- name: Allow PVE api access only for allowed hosts
  ansible.builtin.template:
    src: templates/pveproxy.j2
    dest: '/etc/default/pveproxy'
    owner: root
    group: root
    mode: '0444'
  notify: "restart pveproxy service"

- name: Enable pveproxy
  ansible.builtin.systemd_service:
    name: pveproxy.service
    enabled: true
    daemon_reload: true

- name: Terraform ssh user
  ansible.builtin.include_tasks: terraform.yml
  when: proxmox_terraform_enable | default(False)
- name: Admin user
  ansible.builtin.include_tasks: admin_user.yml
  when: proxmox_admin_password | default('') != ""

- name: Include backups
  ansible.builtin.include_tasks: backups.yml
- name: Include fail2ban
  ansible.builtin.include_tasks: fail2ban.yml
- name: Include unattended_updates
  ansible.builtin.include_tasks: unattended_updates.yml
- name: Include pve config
  ansible.builtin.include_tasks: config.yml



