---

- name: Add bastion users
  ansible.builtin.user:
    name: "{{ item.username }}"
    shell: /bin/rbash
    groups: ''  # remove all the group memberships
    password: '*'  # disable password
    append: false
    state: present
  when: item.username in bastion_user_selection and item.username != "root"  # we never want to make the root user a bastion user
  loop: "{{ users_catalog | list }}"

- name: Remove unneeded bastion users
  ansible.builtin.user:
    name: "{{ item.username }}"
    state: absent
    force: true  # ensure user is deleted if absent is used
  when: item.username not in bastion_user_selection and item.username != "root"  # when the user has not been selected, remove it - except if it is root
  loop: "{{ users_catalog | list }}"

- name: Deploy SSH-Keys
  ansible.posix.authorized_key:
    user: '{{ item.username }}'
    key: "{{ item.ssh_keys | default([]) | list | join('\n') }}"
    exclusive: true
  when: item.username in bastion_user_selection
  loop: "{{ users_catalog | list }}"

- name: Create bin
  ansible.builtin.file:
    path: "/home/{{ item.username }}/bin"
    recurse: true
    owner: '{{ item.username }}'
    mode: '0500'
    state: directory
  when: item.username in bastion_user_selection
  loop: "{{ users_catalog | list }}"

- name: Lockdown PATH
  ansible.builtin.blockinfile:
    path: "/home/{{ item.username }}/.bashrc"
    block: |
      PATH=/home/{{ item.username }}/bin
      export PATH
    state: present
    attributes: i
    owner: '{{ item.username }}'
    create: true
    mode: '0440'
  when: item.username in bastion_user_selection
  loop: "{{ users_catalog | list }}"
